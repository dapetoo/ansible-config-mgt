---

# tasks file for bbaassssiiee.artifactory

- name: 'check presence of java'
  command: '/usr/bin/java -version'
  register: java
  changed_when: no
  tags:
    - artifactory
    - verify

- name: 'any java -version'
  assert:
    that:
      - "'version' in java.stderr"

- name: 'yum install prerequisites'
  when: ansible_os_family == 'RedHat'
  yum:
    name:
      - openssl
      - unzip
    state: present
  retries: 3
  register: result
  until: result is succeeded
  tags:
    - artifactory

- name: 'yum install net-tools'
  when: ansible_os_family == 'RedHat'
  yum:
    name: net-tools
    state: present
  retries: 3
  register: result
  until: result is succeeded

- name: 'apt install prerequisites'
  when: ansible_os_family == 'Debian'
  apt:
    name: openssl
    state: present
    update_cache: yes
  retries: 3
  register: result
  until: result is succeeded

- name: 'set permissions on /opt'
  file:
    path: /opt
    state: directory
    mode: 0755

- name: 'create user to run artifactory'
  user:
    name: "{{ artifactory_username }}"
    home: /opt/artifactory/
    shell: /bin/bash
    system: true
  tags:
    - users

- name: 'verify presence of artifactory'
  stat:
    path: "{{ artifactory_home }}/webapps/artifactory.war"
  register: artifactory_jarfile

- name: 'download artifactory'
  unarchive:
    copy: no
    src: "{{ artifactory_url }}"
    dest: /opt/artifactory/
    validate_certs: no
  retries: 3
  when: not artifactory_jarfile.stat.exists

- name: 'verify if an update is needed'
  shell: "ls -1d /opt/artifactory/artifactory-{{ artifactory_license }}-* | \
          grep -v artifactory-{{ artifactory_license }}-{{ artifactory_version }}"
  failed_when: false
  changed_when: false
  register: previous

- name: 'stop artifactory before upgrade'
  service:
    name: artifactory
    state: stopped
  when: previous.stdout
  notify: 'restart artifactory'

- name: 'pkill artifactory to be sure'
  command: pkill -u artifactory
  register: artifactory_pkill
  changed_when: no
  ignore_errors: yes

- name: 'move artifactory data folder'
  command: "mv {{ previous.stdout }}/data \
  /opt/artifactory/artifactory-{{ artifactory_license }}-{{ artifactory_version }}"
  notify: 'restart artifactory'
  when: previous.stdout

- name: 'remove previous artifactory'
  file:
    dest: "{{ previous.stdout }}"
    state: absent
  when: previous.stdout

- name: 'create config dir for artifactory'
  file:
    dest: /etc/opt/jfrog/artifactory
    state: directory
    owner: "{{ artifactory_username }}"
    mode: 0755
  tags:
    - config

- name: 'create configuration file'
  template:
    src: etc-opt-jfrog-artifactory-default
    dest: /etc/opt/jfrog/artifactory/default
    owner: "{{ artifactory_username }}"
    group: "{{ artifactory_username }}"
    mode: 0644
  notify: 'restart artifactory'
  tags:
    - config

- name: 'symlink current version'
  file:
    state: link
    dest: /opt/artifactory/artifactory
    src: "{{ artifactory_home }}"
    owner: "{{ artifactory_username }}"
  notify: 'restart artifactory'
  tags:
    - config

- name: 'install artifactory as a service'
  command: "{{ artifactory_home }}/bin/installService.sh {{ artifactory_username }}"
  args:
    creates: /etc/init.d/artifactory
  notify: 'restart artifactory'
  tags:
    - init

- name: 'enable artifactory service'
  service:
    name: artifactory
    enabled: true
  tags:
    - init

- name: 'create deploy script'
  copy:
    src: deploy-file.sh
    dest: '/usr/local/bin/deploy-file.sh'
    owner: "{{ artifactory_username }}"
    group: "{{ artifactory_username }}"
    mode: 0755
